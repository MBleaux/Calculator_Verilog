$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 5 clock_i $end
  $var wire 1 6 reset_i $end
  $var wire 1 7 start_i $end
  $var wire 8 8 a_i [7:0] $end
  $var wire 8 9 b_i [7:0] $end
  $var wire 2 : fct_i [1:0] $end
  $var wire 16 ; res_o [15:0] $end
  $var wire 16 < rem_o [15:0] $end
  $var wire 1 = done_o $end
  $scope module top_level $end
   $var wire 32 B width [31:0] $end
   $var wire 1 5 clock_i $end
   $var wire 1 6 reset_i $end
   $var wire 1 7 start_i $end
   $var wire 8 8 a_i [7:0] $end
   $var wire 8 9 b_i [7:0] $end
   $var wire 2 : fct_i [1:0] $end
   $var wire 16 ; res_o [15:0] $end
   $var wire 16 < rem_o [15:0] $end
   $var wire 1 = done_o $end
   $var wire 1 $ a_we_s $end
   $var wire 1 % a_rst_s $end
   $var wire 1 & b_we_s $end
   $var wire 1 ' b_rst_s $end
   $var wire 1 ( fct_we_s $end
   $var wire 1 ) fct_rst_s $end
   $var wire 1 * res_we_s $end
   $var wire 1 + res_rst_s $end
   $var wire 1 , rem_we_s $end
   $var wire 1 - rem_rst_s $end
   $var wire 1 . done_we_s $end
   $var wire 1 / done_rst_s $end
   $var wire 8 > a_i_s [7:0] $end
   $var wire 8 ? b_i_s [7:0] $end
   $var wire 16 1 res_s [15:0] $end
   $var wire 16 2 rem_s [15:0] $end
   $var wire 2 @ fct_i_s [1:0] $end
   $var wire 1 # done_o_s $end
   $scope module alu_unit $end
    $var wire 32 B width [31:0] $end
    $var wire 8 > a_i [7:0] $end
    $var wire 8 ? b_i [7:0] $end
    $var wire 2 @ fct_i [1:0] $end
    $var wire 16 1 res_o [15:0] $end
    $var wire 16 2 rem_o [15:0] $end
    $var wire 1 # done_o $end
    $var wire 16 3 a_extended [15:0] $end
    $var wire 16 4 b_extended [15:0] $end
   $upscope $end
   $scope module fsm_unit $end
    $var wire 1 5 clock_i $end
    $var wire 1 6 reset_i $end
    $var wire 1 7 start_i $end
    $var wire 1 $ a_we_o $end
    $var wire 1 % a_rst_o $end
    $var wire 1 & b_we_o $end
    $var wire 1 ' b_rst_o $end
    $var wire 1 ( fct_we_o $end
    $var wire 1 ) fct_rst_o $end
    $var wire 1 * res_we_o $end
    $var wire 1 + res_rst_o $end
    $var wire 1 , rem_we_o $end
    $var wire 1 - rem_rst_o $end
    $var wire 1 . done_we_o $end
    $var wire 1 / done_rst_o $end
    $var wire 32 0 current_state [31:0] $end
    $var wire 32 A next_state [31:0] $end
   $upscope $end
   $scope module reg_a $end
    $var wire 32 B width [31:0] $end
    $var wire 8 8 d_i [7:0] $end
    $var wire 1 5 clock_i $end
    $var wire 1 % reset_i $end
    $var wire 1 $ we_i $end
    $var wire 8 > q_o [7:0] $end
   $upscope $end
   $scope module reg_b $end
    $var wire 32 B width [31:0] $end
    $var wire 8 9 d_i [7:0] $end
    $var wire 1 5 clock_i $end
    $var wire 1 ' reset_i $end
    $var wire 1 & we_i $end
    $var wire 8 ? q_o [7:0] $end
   $upscope $end
   $scope module reg_done $end
    $var wire 32 C width [31:0] $end
    $var wire 1 # d_i [0:0] $end
    $var wire 1 5 clock_i $end
    $var wire 1 / reset_i $end
    $var wire 1 . we_i $end
    $var wire 1 = q_o [0:0] $end
   $upscope $end
   $scope module reg_fct $end
    $var wire 32 D width [31:0] $end
    $var wire 2 : d_i [1:0] $end
    $var wire 1 5 clock_i $end
    $var wire 1 ) reset_i $end
    $var wire 1 ( we_i $end
    $var wire 2 @ q_o [1:0] $end
   $upscope $end
   $scope module reg_rem $end
    $var wire 32 E width [31:0] $end
    $var wire 16 2 d_i [15:0] $end
    $var wire 1 5 clock_i $end
    $var wire 1 - reset_i $end
    $var wire 1 , we_i $end
    $var wire 16 < q_o [15:0] $end
   $upscope $end
   $scope module reg_res $end
    $var wire 32 E width [31:0] $end
    $var wire 16 1 d_i [15:0] $end
    $var wire 1 5 clock_i $end
    $var wire 1 + reset_i $end
    $var wire 1 * we_i $end
    $var wire 16 ; q_o [15:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
0%
0&
0'
0(
0)
0*
0+
0,
0-
0.
0/
b00000000000000000000000000000000 0
b0000000000000000 1
b0000000000000000 2
b0000000000000000 3
b0000000000000000 4
05
06
07
b00001111 8
b00000010 9
b11 :
b0000000000000000 ;
b0000000000000000 <
0=
b00000000 >
b00000000 ?
b00 @
b00000000000000000000000000000000 A
b00000000000000000000000000001000 B
b00000000000000000000000000000001 C
b00000000000000000000000000000010 D
b00000000000000000000000000010000 E
#1
1#
1$
1%
1&
1'
1(
1)
b00000000000000000000000000000001 0
15
16
17
b00000000000000000000000000000010 A
#2
05
#3
0$
0&
0(
b00000000000000000000000000000010 0
b0000000000000111 1
b0000000000000001 2
b0000000000001111 3
b0000000000000010 4
15
b00001111 >
b00000010 ?
b11 @
b00000000000000000000000000000011 A
#4
05
#5
1*
1+
1,
1-
1.
1/
b00000000000000000000000000000011 0
15
b00000000000000000000000000000100 A
#6
05
#7
0*
0,
0.
b00000000000000000000000000000100 0
15
b0000000000000111 ;
b0000000000000001 <
1=
#8
05
#9
15
#10
05
#11
15
#12
05
#13
15
#14
05
#15
15
#16
05
#17
15
#18
05
#19
15
