$version Generated by VerilatedVcd $end
$date Fri Apr 26 18:36:34 2024
 $end
$timescale   1ps $end

 $scope module TOP $end
  $var wire  8 1 a_i [7:0] $end
  $var wire  8 2 b_i [7:0] $end
  $var wire  1 . clock_i $end
  $var wire  2 3 fct_i [1:0] $end
  $var wire  1 / reset_i $end
  $var wire 16 4 s_o [15:0] $end
  $var wire  1 5 signal_o $end
  $var wire  1 0 start_i $end
  $scope module top_level_alternative $end
   $var wire  8 1 a_i [7:0] $end
   $var wire  8 6 a_i_s [7:0] $end
   $var wire  1 $ a_rst_s $end
   $var wire  1 # a_we_s $end
   $var wire  8 2 b_i [7:0] $end
   $var wire  8 7 b_i_s [7:0] $end
   $var wire  1 & b_rst_s $end
   $var wire  1 % b_we_s $end
   $var wire  1 . clock_i $end
   $var wire  2 3 fct_i [1:0] $end
   $var wire  2 9 fct_i_s [1:0] $end
   $var wire  1 ( fct_rst_s $end
   $var wire  1 ' fct_we_s $end
   $var wire  1 / reset_i $end
   $var wire 16 4 s_o [15:0] $end
   $var wire  1 * s_rst_s $end
   $var wire 16 8 s_s [15:0] $end
   $var wire  1 ) s_we_s $end
   $var wire  1 5 signal_o $end
   $var wire  1 : signal_o_s $end
   $var wire  1 , signal_rst_s $end
   $var wire  1 + signal_we_s $end
   $var wire  1 0 start_i $end
   $var wire 32 < width [31:0] $end
   $scope module dut $end
    $var wire  8 6 a_i [7:0] $end
    $var wire  8 7 b_i [7:0] $end
    $var wire  2 9 fct_i [1:0] $end
    $var wire 16 8 s_o [15:0] $end
    $var wire  1 : signal_o $end
    $var wire 32 < width [31:0] $end
   $upscope $end
   $scope module fsm_unit $end
    $var wire  1 $ a_rst_o $end
    $var wire  1 # a_we_o $end
    $var wire  1 & b_rst_o $end
    $var wire  1 % b_we_o $end
    $var wire  1 . clock_i $end
    $var wire 32 - current_state [31:0] $end
    $var wire  1 ( fct_rst_o $end
    $var wire  1 ' fct_we_o $end
    $var wire 32 ; next_state [31:0] $end
    $var wire  1 / reset_i $end
    $var wire  1 * s_rst_o $end
    $var wire  1 ) s_we_o $end
    $var wire  1 , signal_rst_o $end
    $var wire  1 + signal_we_o $end
    $var wire  1 0 start_i $end
   $upscope $end
   $scope module reg_a $end
    $var wire  1 . clock_i $end
    $var wire  8 1 d_i [7:0] $end
    $var wire  8 6 q_o [7:0] $end
    $var wire  1 $ reset_i $end
    $var wire  1 # we_i $end
    $var wire 32 < width [31:0] $end
   $upscope $end
   $scope module reg_b $end
    $var wire  1 . clock_i $end
    $var wire  8 2 d_i [7:0] $end
    $var wire  8 7 q_o [7:0] $end
    $var wire  1 & reset_i $end
    $var wire  1 % we_i $end
    $var wire 32 < width [31:0] $end
   $upscope $end
   $scope module reg_fct $end
    $var wire  1 . clock_i $end
    $var wire  2 3 d_i [1:0] $end
    $var wire  2 9 q_o [1:0] $end
    $var wire  1 ( reset_i $end
    $var wire  1 ' we_i $end
    $var wire 32 = width [31:0] $end
   $upscope $end
   $scope module reg_s $end
    $var wire  1 . clock_i $end
    $var wire 16 8 d_i [15:0] $end
    $var wire 16 4 q_o [15:0] $end
    $var wire  1 * reset_i $end
    $var wire  1 ) we_i $end
    $var wire 32 > width [31:0] $end
   $upscope $end
   $scope module reg_signal $end
    $var wire  1 . clock_i $end
    $var wire  1 : d_i [0:0] $end
    $var wire  1 5 q_o [0:0] $end
    $var wire  1 , reset_i $end
    $var wire  1 + we_i $end
    $var wire 32 ? width [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
0%
0&
0'
0(
0)
0*
0+
0,
b00000000000000000000000000000000 -
0.
0/
00
b00000001 1
b00000010 2
b01 3
b0000000000000000 4
05
b00000000 6
b00000000 7
b0000000000000000 8
b00 9
0:
b00000000000000000000000000000000 ;
b00000000000000000000000000001000 <
b00000000000000000000000000000010 =
b00000000000000000000000000010000 >
b00000000000000000000000000000001 ?
#1
1.
1/
10
b00000000000000000000000000000001 ;
#2
0.
#3
1#
1$
1%
1&
1'
1(
b00000000000000000000000000000001 -
1.
b00000000000000000000000000000010 ;
#4
0.
#5
0#
0%
0'
b00000000000000000000000000000010 -
1.
b00000001 6
b00000010 7
b1111111111111111 8
b01 9
b00000000000000000000000000000011 ;
#6
0.
#7
1)
1*
1+
1,
b00000000000000000000000000000011 -
1.
b00000000000000000000000000000100 ;
#8
0.
#9
0)
0+
b00000000000000000000000000000100 -
1.
b1111111111111111 4
#10
0.
#11
1.
#12
0.
#13
1.
#14
0.
#15
1.
#16
0.
#17
1.
#18
0.
#19
1.
